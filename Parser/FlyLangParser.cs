//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\danie\Documents\Projecten\FlyLang\FlyLang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FlyLang.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FlyLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, LET=8, TRUE=9, 
		FALSE=10, BOOLOPERATOR=11, LQ=12, EQ=13, BEQ=14, ADD=15, SUB=16, MUL=17, 
		DIV=18, PRL=19, PRR=20, BRL=21, BRR=22, SC=23, COLON=24, INT=25, FLOAT=26, 
		STRING=27, ID=28, ALPHA=29, COMMENT=30, WS=31;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_assignment = 2, RULE_return = 3, 
		RULE_use = 4, RULE_definition = 5, RULE_if = 6, RULE_elif = 7, RULE_else = 8, 
		RULE_while = 9, RULE_boolean = 10, RULE_names = 11, RULE_expression = 12, 
		RULE_action = 13, RULE_varCall = 14, RULE_methodCall = 15, RULE_string = 16, 
		RULE_int = 17, RULE_float = 18, RULE_id = 19;
	public static readonly string[] ruleNames = {
		"program", "statement", "assignment", "return", "use", "definition", "if", 
		"elif", "else", "while", "boolean", "names", "expression", "action", "varCall", 
		"methodCall", "string", "int", "float", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'return'", "'use'", "'if'", "'elif'", "'else'", "'while'", "','", 
		"'let'", "'true'", "'false'", null, "'=>'", "'='", "'=='", "'+'", "'-'", 
		"'*'", "'/'", "'('", "')'", "'{'", "'}'", "';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "LET", "TRUE", "FALSE", 
		"BOOLOPERATOR", "LQ", "EQ", "BEQ", "ADD", "SUB", "MUL", "DIV", "PRL", 
		"PRR", "BRL", "BRR", "SC", "COLON", "INT", "FLOAT", "STRING", "ID", "ALPHA", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FlyLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FlyLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlyLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlyLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << ID))) != 0)) {
				{
				{
				State = 40; statement();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode SC() { return GetToken(FlyLangParser.SC, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 46; assignment();
					}
					break;
				case 2:
					{
					State = 47; definition();
					}
					break;
				case 3:
					{
					State = 48; @return();
					}
					break;
				case 4:
					{
					State = 49; methodCall();
					}
					break;
				case 5:
					{
					State = 50; use();
					}
					break;
				}
				State = 53; Match(SC);
				}
				break;
			case T__2:
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 55; @if();
					}
					break;
				case T__5:
					{
					State = 56; @while();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode EQ() { return GetToken(FlyLangParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ID() { return GetToken(FlyLangParser.ID, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; _localctx.name = Match(ID);
			State = 62; Match(EQ);
			State = 63; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 6, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__0);
			State = 66; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FlyLangParser.ID, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 8, RULE_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(T__1);
			State = 69; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode PRL() { return GetToken(FlyLangParser.PRL, 0); }
		public NamesContext names() {
			return GetRuleContext<NamesContext>(0);
		}
		public ITerminalNode PRR() { return GetToken(FlyLangParser.PRR, 0); }
		public ITerminalNode LQ() { return GetToken(FlyLangParser.LQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ID() { return GetToken(FlyLangParser.ID, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; _localctx.name = Match(ID);
			State = 72; Match(PRL);
			State = 73; names();
			State = 74; Match(PRR);
			State = 75; Match(LQ);
			State = 76; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(FlyLangParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LQ() { return GetToken(FlyLangParser.LQ, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public ElifContext[] elif() {
			return GetRuleContexts<ElifContext>();
		}
		public ElifContext elif(int i) {
			return GetRuleContext<ElifContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 12, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(T__2);
			State = 79; Match(COLON);
			State = 80; expression(0);
			State = 81; Match(LQ);
			{
			State = 82; action();
			}
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 83; elif();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case T__0:
			case T__1:
			case T__2:
			case T__5:
			case BRR:
			case ID:
				{
				}
				break;
			case T__4:
				{
				State = 90; @else();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(FlyLangParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LQ() { return GetToken(FlyLangParser.LQ, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public ElifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifContext elif() {
		ElifContext _localctx = new ElifContext(Context, State);
		EnterRule(_localctx, 14, RULE_elif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__3);
			State = 94; Match(COLON);
			State = 95; expression(0);
			State = 96; Match(LQ);
			{
			State = 97; action();
			}
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				State = 99; @else();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(FlyLangParser.COLON, 0); }
		public ITerminalNode LQ() { return GetToken(FlyLangParser.LQ, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 16, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__4);
			State = 103; Match(COLON);
			State = 104; Match(LQ);
			{
			State = 105; action();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(FlyLangParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LQ() { return GetToken(FlyLangParser.LQ, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 18, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__5);
			State = 108; Match(COLON);
			State = 109; expression(0);
			State = 110; Match(LQ);
			{
			State = 111; action();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(FlyLangParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(FlyLangParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 20, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamesContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(FlyLangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FlyLangParser.ID, i);
		}
		public NamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_names; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamesContext names() {
		NamesContext _localctx = new NamesContext(Context, State);
		EnterRule(_localctx, 22, RULE_names);
		int _la;
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(ID);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 117; Match(T__6);
					State = 118; Match(ID);
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode PRL() { return GetToken(FlyLangParser.PRL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PRR() { return GetToken(FlyLangParser.PRR, 0); }
		public ITerminalNode BOOLOPERATOR() { return GetToken(FlyLangParser.BOOLOPERATOR, 0); }
		public ITerminalNode MUL() { return GetToken(FlyLangParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(FlyLangParser.DIV, 0); }
		public ITerminalNode SUB() { return GetToken(FlyLangParser.SUB, 0); }
		public ITerminalNode ADD() { return GetToken(FlyLangParser.ADD, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 127; @int();
				}
				break;
			case 2:
				{
				State = 128; boolean();
				}
				break;
			case 3:
				{
				State = 129; @float();
				}
				break;
			case 4:
				{
				State = 130; @string();
				}
				break;
			case 5:
				{
				State = 131; methodCall();
				}
				break;
			case 6:
				{
				State = 132; varCall();
				}
				break;
			case 7:
				{
				State = 133; action();
				}
				break;
			case 8:
				{
				State = 134; Match(PRL);
				State = 135; expression(0);
				State = 136; Match(PRR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 149;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 141; _localctx.op = Match(BOOLOPERATOR);
						State = 142; _localctx.right = expression(4);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 144;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 145; _localctx.right = expression(3);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 147;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 148; _localctx.right = expression(2);
						}
						break;
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode BRL() { return GetToken(FlyLangParser.BRL, 0); }
		public ITerminalNode BRR() { return GetToken(FlyLangParser.BRR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 26, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(BRL);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << ID))) != 0)) {
				{
				{
				State = 155; statement();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161; Match(BRR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarCallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FlyLangParser.ID, 0); }
		public VarCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarCallContext varCall() {
		VarCallContext _localctx = new VarCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_varCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode PRL() { return GetToken(FlyLangParser.PRL, 0); }
		public ITerminalNode PRR() { return GetToken(FlyLangParser.PRR, 0); }
		public ITerminalNode ID() { return GetToken(FlyLangParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; _localctx.name = Match(ID);
			State = 166; Match(PRL);
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRR:
				{
				}
				break;
			case TRUE:
			case FALSE:
			case PRL:
			case BRL:
			case INT:
			case FLOAT:
			case STRING:
			case ID:
				{
				State = 168; expression(0);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 169; Match(T__6);
					State = 170; expression(0);
					}
					}
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 178; Match(PRR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(FlyLangParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(FlyLangParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 34, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(FlyLangParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 36, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FlyLangParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyLangVisitor<TResult> typedVisitor = visitor as IFlyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 38, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '\xBF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\a', '\x2', ',', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '/', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '<', '\n', '\x3', '\x5', '\x3', 
		'>', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'W', '\n', '\b', '\f', 
		'\b', '\xE', '\b', 'Z', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'^', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'g', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', 'z', '\n', '\r', '\f', '\r', '\xE', '\r', '}', '\v', '\r', '\x5', 
		'\r', '\x7F', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x8D', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\x98', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x9B', '\v', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\x9F', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xA2', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xAE', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xB1', '\v', '\x11', '\x5', '\x11', '\xB3', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x2', '\x3', '\x1A', '\x16', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', '\x5', '\x3', '\x2', 
		'\v', '\f', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x11', '\x12', 
		'\x2', '\xC3', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x4', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 'P', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '_', '\x3', '\x2', '\x2', '\x2', '\x12', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'm', '\x3', '\x2', '\x2', '\x2', '\x16', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '~', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xA5', '\x3', '\x2', '\x2', '\x2', ' ', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xB6', '\x3', '\x2', '\x2', '\x2', '$', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xBA', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x5', '\x4', '\x3', '\x2', 
		'+', '*', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x36', '\x5', '\x6', '\x4', '\x2', '\x31', '\x36', '\x5', 
		'\f', '\a', '\x2', '\x32', '\x36', '\x5', '\b', '\x5', '\x2', '\x33', 
		'\x36', '\x5', ' ', '\x11', '\x2', '\x34', '\x36', '\x5', '\n', '\x6', 
		'\x2', '\x35', '\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x19', '\x2', '\x2', '\x38', '>', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'<', '\x5', '\xE', '\b', '\x2', ':', '<', '\x5', '\x14', '\v', '\x2', 
		';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', '=', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\x1E', '\x2', '\x2', '@', '\x41', 
		'\a', '\xF', '\x2', '\x2', '\x41', '\x42', '\x5', '\x1A', '\xE', '\x2', 
		'\x42', '\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x3', 
		'\x2', '\x2', '\x44', '\x45', '\x5', '\x1A', '\xE', '\x2', '\x45', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x4', '\x2', '\x2', 'G', 
		'H', '\a', '\x1E', '\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\x1E', '\x2', '\x2', 'J', 'K', '\a', '\x15', '\x2', '\x2', 
		'K', 'L', '\x5', '\x18', '\r', '\x2', 'L', 'M', '\a', '\x16', '\x2', '\x2', 
		'M', 'N', '\a', '\xE', '\x2', '\x2', 'N', 'O', '\x5', '\x1A', '\xE', '\x2', 
		'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x5', '\x2', '\x2', 
		'Q', 'R', '\a', '\x1A', '\x2', '\x2', 'R', 'S', '\x5', '\x1A', '\xE', 
		'\x2', 'S', 'T', '\a', '\xE', '\x2', '\x2', 'T', 'X', '\x5', '\x1C', '\xF', 
		'\x2', 'U', 'W', '\x5', '\x10', '\t', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', ']', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\x5', '\x12', '\n', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\a', '\x6', '\x2', '\x2', '`', '\x61', 
		'\a', '\x1A', '\x2', '\x2', '\x61', '\x62', '\x5', '\x1A', '\xE', '\x2', 
		'\x62', '\x63', '\a', '\xE', '\x2', '\x2', '\x63', '\x66', '\x5', '\x1C', 
		'\xF', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x5', 
		'\x12', '\n', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\a', '\a', '\x2', '\x2', 'i', 'j', '\a', '\x1A', '\x2', 
		'\x2', 'j', 'k', '\a', '\xE', '\x2', '\x2', 'k', 'l', '\x5', '\x1C', '\xF', 
		'\x2', 'l', '\x13', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\b', 
		'\x2', '\x2', 'n', 'o', '\a', '\x1A', '\x2', '\x2', 'o', 'p', '\x5', '\x1A', 
		'\xE', '\x2', 'p', 'q', '\a', '\xE', '\x2', '\x2', 'q', 'r', '\x5', '\x1C', 
		'\xF', '\x2', 'r', '\x15', '\x3', '\x2', '\x2', '\x2', 's', 't', '\t', 
		'\x2', '\x2', '\x2', 't', '\x17', '\x3', '\x2', '\x2', '\x2', 'u', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', 'v', '{', '\a', '\x1E', '\x2', '\x2', 'w', 
		'x', '\a', '\t', '\x2', '\x2', 'x', 'z', '\a', '\x1E', '\x2', '\x2', 'y', 
		'w', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', 
		'{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '~', 'u', '\x3', '\x2', '\x2', '\x2', '~', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\b', 
		'\xE', '\x1', '\x2', '\x81', '\x8D', '\x5', '$', '\x13', '\x2', '\x82', 
		'\x8D', '\x5', '\x16', '\f', '\x2', '\x83', '\x8D', '\x5', '&', '\x14', 
		'\x2', '\x84', '\x8D', '\x5', '\"', '\x12', '\x2', '\x85', '\x8D', '\x5', 
		' ', '\x11', '\x2', '\x86', '\x8D', '\x5', '\x1E', '\x10', '\x2', '\x87', 
		'\x8D', '\x5', '\x1C', '\xF', '\x2', '\x88', '\x89', '\a', '\x15', '\x2', 
		'\x2', '\x89', '\x8A', '\x5', '\x1A', '\xE', '\x2', '\x8A', '\x8B', '\a', 
		'\x16', '\x2', '\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\f', '\x5', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\r', '\x2', '\x2', '\x90', '\x98', '\x5', '\x1A', '\xE', 
		'\x6', '\x91', '\x92', '\f', '\x4', '\x2', '\x2', '\x92', '\x93', '\t', 
		'\x3', '\x2', '\x2', '\x93', '\x98', '\x5', '\x1A', '\xE', '\x5', '\x94', 
		'\x95', '\f', '\x3', '\x2', '\x2', '\x95', '\x96', '\t', '\x4', '\x2', 
		'\x2', '\x96', '\x98', '\x5', '\x1A', '\xE', '\x4', '\x97', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x91', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA0', '\a', '\x17', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\x4', '\x3', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x18', '\x2', '\x2', '\xA4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x1E', '\x2', 
		'\x2', '\xA6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'\x1E', '\x2', '\x2', '\xA8', '\xB2', '\a', '\x15', '\x2', '\x2', '\xA9', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAF', '\x5', '\x1A', '\xE', 
		'\x2', '\xAB', '\xAC', '\a', '\t', '\x2', '\x2', '\xAC', '\xAE', '\x5', 
		'\x1A', '\xE', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'\x16', '\x2', '\x2', '\xB5', '!', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x1D', '\x2', '\x2', '\xB7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\x1B', '\x2', '\x2', '\xB9', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x1C', '\x2', '\x2', '\xBB', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x1E', '\x2', 
		'\x2', '\xBD', ')', '\x3', '\x2', '\x2', '\x2', '\x11', '-', '\x35', ';', 
		'=', 'X', ']', '\x66', '{', '~', '\x8C', '\x97', '\x99', '\xA0', '\xAF', 
		'\xB2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FlyLang.Parser
